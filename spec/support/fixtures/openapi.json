{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Example API",
    "description": "Welcome to the documentation for the Example API"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:9292/core/v1/"
    }
  ],
  "paths": {
    "/time_formatting/incredibly/super/duper/long/format": {
      "get": {
        "operationId": "get:time_formatting_incredibly_super_duper_long_format",
        "tags": [
          "Core"
        ],
        "parameters": [
          {
            "name": "time[unix]",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Time is a lookup argument set. All 'time[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "time[string]",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Time is a lookup argument set. All 'time[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "timezone",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TimeZone"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Format the given time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "formatted_time": {
                      "type": "string",
                      "description": "Time formatted time as a string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "formatted_time"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidTimeResponse"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitReachedResponse"
          }
        }
      }
    },
    "/example/format": {
      "post": {
        "operationId": "post:example_format",
        "tags": [
          "Core"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "time": {
                    "$ref": "#/components/schemas/TimeLookupArgumentSet"
                  },
                  "timezone": {
                    "$ref": "#/components/schemas/TimeZone"
                  }
                },
                "required": [
                  "time",
                  "timezone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Format the given time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "formatted_time": {
                      "type": "string",
                      "description": "Time formatted time as a string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "formatted_time"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidTimeResponse"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitReachedResponse"
          }
        }
      }
    },
    "/example/format_multiple": {
      "post": {
        "operationId": "post:example_format_multiple",
        "tags": [
          "Core"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "times": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TimeLookupArgumentSet"
                    }
                  }
                },
                "required": [
                  "times"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Format the given times",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "formatted_times": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "times": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PostExampleFormatMultiple200ResponseTimes"
                      }
                    }
                  },
                  "required": [
                    "formatted_times",
                    "times"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidTimeResponse"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitReachedResponse"
          }
        }
      }
    },
    "/time/now": {
      "get": {
        "operationId": "get:time_now",
        "tags": [
          "Core"
        ],
        "parameters": [
          {
            "name": "timezone",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TimeZone"
            }
          },
          {
            "name": "time_zones[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TimeZone"
              }
            },
            "description": "An array of any Timezone objects",
            "required": true
          },
          {
            "name": "filters[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "time": {
                      "description": "A Time object",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Time"
                        }
                      ]
                    },
                    "time_zones": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TimeZone"
                      }
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "An array of strings, might be null",
                      "nullable": true
                    },
                    "my_polymorph": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/MonthLong"
                        },
                        {
                          "$ref": "#/components/schemas/MonthShort"
                        }
                      ],
                      "description": "A polymorphic field!"
                    },
                    "my_partial_polymorph": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTimeNow200ResponseMyPartialPolymorph"
                        }
                      ],
                      "description": "Partial polymorph",
                      "nullable": true
                    }
                  },
                  "required": [
                    "time",
                    "time_zones",
                    "filters",
                    "my_polymorph",
                    "my_partial_polymorph"
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "503": {
            "$ref": "#/components/responses/WrongDayOfWeekResponse"
          }
        }
      },
      "post": {
        "operationId": "post:time_now",
        "tags": [
          "Core"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "timezone": {
                    "$ref": "#/components/schemas/TimeZone"
                  },
                  "time_zones": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TimeZone"
                    }
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "time_zones"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the current time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "time": {
                      "description": "A Time object",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Time"
                        }
                      ]
                    },
                    "time_zones": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TimeZone"
                      }
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "An array of strings, might be null",
                      "nullable": true
                    },
                    "my_polymorph": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/MonthLong"
                        },
                        {
                          "$ref": "#/components/schemas/MonthShort"
                        }
                      ],
                      "description": "A polymorphic field!"
                    },
                    "my_partial_polymorph": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PostTimeNow200ResponseMyPartialPolymorph"
                        }
                      ],
                      "description": "Partial polymorph",
                      "nullable": true
                    }
                  },
                  "required": [
                    "time",
                    "time_zones",
                    "filters",
                    "my_polymorph",
                    "my_partial_polymorph"
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "503": {
            "$ref": "#/components/responses/WrongDayOfWeekResponse"
          }
        }
      }
    },
    "/test/:object": {
      "get": {
        "operationId": "get:test_object",
        "tags": [
          "Core"
        ],
        "parameters": [
          {
            "name": "object[id]",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "All 'object[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "object[permalink]",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "The permalink of the object to look up"
            },
            "description": "The permalink of the object to look up. All 'object[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "scalar",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Any string will do, it's not validated"
            },
            "description": "Any string will do, it's not validated",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "time": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTestObject200ResponseTime"
                        }
                      ],
                      "nullable": true
                    },
                    "object_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "object_id"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/AnotherInvalidTestSomethingVeryLongProblemBoomSomethingWrong400Error"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundResponse"
          }
        }
      },
      "post": {
        "operationId": "post:test_object",
        "tags": [
          "Core"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/ObjectLookup"
                  },
                  "scalar": {
                    "type": "string",
                    "description": "Any string will do, it's not validated"
                  }
                },
                "required": [
                  "object",
                  "scalar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the current time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "time": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PostTestObject200ResponseTime"
                        }
                      ],
                      "nullable": true
                    },
                    "object_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "object_id"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/AnotherInvalidTestSomethingVeryLongProblemBoomSomethingWrong400Error"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundResponse"
          }
        }
      }
    },
    "/time/formatting/incredibly/super/duper/long/format": {
      "get": {
        "operationId": "get:t_f_i_s_d_l_f",
        "tags": [
          "Core"
        ],
        "parameters": [
          {
            "name": "time[unix]",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Time is a lookup argument set. All 'time[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "time[string]",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Time is a lookup argument set. All 'time[]' params are mutually exclusive, only one can be provided."
          },
          {
            "name": "timezone",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TimeZone"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Format the given time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "formatted_time": {
                      "type": "string",
                      "description": "Time formatted time as a string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "formatted_time"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidTimeResponse"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitReachedResponse"
          }
        }
      }
    },
    "/time/formatting/format": {
      "post": {
        "operationId": "post:time_formatting_format",
        "tags": [
          "Core"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "time": {
                    "$ref": "#/components/schemas/TimeLookupArgumentSet"
                  },
                  "timezone": {
                    "$ref": "#/components/schemas/TimeZone"
                  }
                },
                "required": [
                  "time",
                  "timezone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Format the given time",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "formatted_time": {
                      "type": "string",
                      "description": "Time formatted time as a string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "formatted_time"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidTimeResponse"
          },
          "403": {
            "$ref": "#/components/responses/APIAuthenticator403Response"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitReachedResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TimeZone": {
        "type": "string",
        "enum": [
          "Europe/London",
          "Europe/Madrid",
          "Asia/Singapore"
        ]
      },
      "InvalidToken": {
        "type": "object",
        "properties": {
          "given_token": {
            "type": "string"
          }
        }
      },
      "InvalidTokenResponse": {
        "type": "object",
        "description": "The token provided is invalid. In this example, you should provide 'example'.",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid_token"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "$ref": "#/components/schemas/InvalidToken"
          }
        }
      },
      "UnauthorizedNetworkForAPIToken": {
        "type": "object",
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "The IP address the request was received from"
          }
        }
      },
      "UnauthorizedNetworkForAPITokenResponse": {
        "type": "object",
        "description": "Network is not allowed to access the API with this API token",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "unauthorized_network_for_api_token"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "$ref": "#/components/schemas/UnauthorizedNetworkForAPIToken"
          }
        }
      },
      "OneOfAPIAuthenticator403Response": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/InvalidTokenResponse"
          },
          {
            "$ref": "#/components/schemas/UnauthorizedNetworkForAPITokenResponse"
          }
        ]
      },
      "RateLimitReached": {
        "type": "object",
        "properties": {
          "total_permitted": {
            "type": "integer",
            "description": "The total number of requests per minute that are permitted"
          }
        }
      },
      "TimeLookupArgumentSet": {
        "description": "All 'time[]' params are mutually exclusive, only one can be provided.",
        "type": "object",
        "properties": {
          "unix": {
            "type": "string"
          },
          "string": {
            "type": "string"
          }
        },
        "required": [
          "unix"
        ]
      },
      "PostExampleFormatMultiple200ResponseTimes": {
        "type": "object",
        "properties": {
          "unix": {
            "type": "integer"
          },
          "year": {
            "$ref": "#/components/schemas/PostExampleFormatMultiplePartYear"
          },
          "as_array_of_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostExampleFormatMultiplePartAsArrayOfObjects"
            }
          }
        }
      },
      "PostExampleFormatMultiplePartYear": {
        "type": "object",
        "properties": {
          "as_string": {
            "type": "string"
          }
        }
      },
      "PostExampleFormatMultiplePartAsArrayOfObjects": {
        "type": "object",
        "properties": {
          "as_integer": {
            "type": "integer"
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "unix": {
            "type": "integer"
          },
          "day_of_week": {
            "$ref": "#/components/schemas/Day"
          },
          "full": {
            "type": "string"
          },
          "year": {
            "$ref": "#/components/schemas/Year"
          },
          "month": {
            "$ref": "#/components/schemas/MonthPolymorph"
          },
          "as_array": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "as_array_of_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Year"
            }
          },
          "as_decimal": {
            "type": "number",
            "format": "float"
          },
          "as_base64": {
            "type": "string"
          },
          "as_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Day": {
        "type": "string",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      "Year": {
        "type": "object",
        "properties": {
          "as_integer": {
            "type": "integer"
          },
          "as_string": {
            "type": "string"
          },
          "as_array_of_strings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "as_array_of_enums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Day"
            }
          }
        }
      },
      "MonthPolymorph": {
        "type": "object",
        "properties": {
          "month": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MonthLong"
              },
              {
                "$ref": "#/components/schemas/MonthShort"
              }
            ]
          }
        }
      },
      "MonthLong": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer"
          },
          "month_long": {
            "type": "string"
          }
        }
      },
      "MonthShort": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer"
          },
          "month_short": {
            "type": "string"
          }
        }
      },
      "GetTimeNow200ResponseMyPartialPolymorph": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer"
          }
        }
      },
      "PostTimeNow200ResponseMyPartialPolymorph": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer"
          }
        }
      },
      "GetTestObject200ResponseTime": {
        "type": "object",
        "properties": {
          "unix": {
            "type": "integer"
          },
          "day_of_week": {
            "$ref": "#/components/schemas/Day"
          },
          "year": {
            "$ref": "#/components/schemas/GetTestObjectPartYear"
          }
        }
      },
      "GetTestObjectPartYear": {
        "type": "object",
        "properties": {
          "as_string": {
            "type": "string"
          }
        }
      },
      "SomethingVeryLongProblemBoomResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid_test"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          }
        }
      },
      "SoManyProblemsSoLittleTimeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "so_many_problems"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          }
        }
      },
      "AnotherInvalidTestResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "another_invalid_test"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          }
        }
      },
      "SomethingWrongResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "something_wrong"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          }
        }
      },
      "ReallyWrongResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "really_wrong"
            ]
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          }
        }
      },
      "OneOfAnotherInvalidTestSomethingVeryLongProblemBoomSomethingWrong400Error": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SomethingVeryLongProblemBoomResponse"
          },
          {
            "$ref": "#/components/schemas/SoManyProblemsSoLittleTimeResponse"
          },
          {
            "$ref": "#/components/schemas/AnotherInvalidTestResponse"
          },
          {
            "$ref": "#/components/schemas/SomethingWrongResponse"
          },
          {
            "$ref": "#/components/schemas/ReallyWrongResponse"
          }
        ]
      },
      "ObjectLookup": {
        "description": "All 'object[]' params are mutually exclusive, only one can be provided.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "permalink": {
            "type": "string",
            "description": "The permalink of the object to look up"
          }
        }
      },
      "PostTestObject200ResponseTime": {
        "type": "object",
        "properties": {
          "unix": {
            "type": "integer"
          },
          "day_of_week": {
            "$ref": "#/components/schemas/Day"
          },
          "year": {
            "$ref": "#/components/schemas/PostTestObjectPartYear"
          }
        }
      },
      "PostTestObjectPartYear": {
        "type": "object",
        "properties": {
          "as_string": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "InvalidTimeResponse": {
        "description": "400 error response",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "invalid_time"
                  ]
                },
                "description": {
                  "type": "string"
                },
                "detail": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "APIAuthenticator403Response": {
        "description": "403 error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OneOfAPIAuthenticator403Response"
            }
          }
        }
      },
      "RateLimitReachedResponse": {
        "description": "You have reached the rate limit for this type of request",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "rate_limit_reached"
                  ]
                },
                "description": {
                  "type": "string"
                },
                "detail": {
                  "$ref": "#/components/schemas/RateLimitReached"
                }
              }
            }
          }
        }
      },
      "WrongDayOfWeekResponse": {
        "description": "You called this API on the wrong day of the week, try again tomorrow",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "wrong_day_of_week"
                  ]
                },
                "description": {
                  "type": "string"
                },
                "detail": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "AnotherInvalidTestSomethingVeryLongProblemBoomSomethingWrong400Error": {
        "description": "400 error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OneOfAnotherInvalidTestSomethingVeryLongProblemBoomSomethingWrong400Error"
            }
          }
        }
      },
      "ObjectNotFoundResponse": {
        "description": "No object was found matching any of the criteria provided in the arguments",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "object_not_found"
                  ]
                },
                "description": {
                  "type": "string"
                },
                "detail": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "MainAuthenticator": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "security": [
    {
      "MainAuthenticator": [

      ]
    }
  ]
}
